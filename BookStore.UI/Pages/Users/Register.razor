@page "/user/register"
@inject IClient httpClient
@inject NavigationManager navManager
@using BookStore.UI.Services
<h3>Register New Account</h3>

@if(string.IsNullOrEmpty(message)==false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}
<div class="card-body">
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
        <label for="email">Email Address</label>
        <InputText class="form-control" @bind-Value="RegistrationModel.Email"/>
        <ValidationMessage For="@(()=> RegistrationModel.Email)"/>
        </div>
        <div class="form-group">
        <label for="first_name">First Name</label>
        <InputText class="form-control" @bind-Value="RegistrationModel.FirstName"/>
        <ValidationMessage For="@(()=> RegistrationModel.FirstName)"/>
        </div>
        <div class="form-group">
        <label for="last_name">Last Name</label>
        <InputText class="form-control" @bind-Value="RegistrationModel.LastName"/>
        <ValidationMessage For="@(()=> RegistrationModel.LastName)"/>
        </div>
        <div class="form-group">
        <label for="password">Password</label>
        <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password"/>
        <ValidationMessage For="@(()=> RegistrationModel.Password)"/>
        </div>  
        <div class="form-group">
        <label for="role">Role</label>
        <InputText class="form-control" @bind-Value="RegistrationModel.Role"/>
        <ValidationMessage For="@(()=> RegistrationModel.Role)"/>
        </div>
@*      <div class="col-sm-10">
        <InputSelect id="roles" @bind-Value="RegistrationModel.Role" >
        @foreach (var role in roles)
        {
            <option value="@role.RegistrationModel.Role">@role.Role</option>
        }
        </InputSelect>
        </div>*@
        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>
@code {
    UserDTO RegistrationModel = new UserDTO();
    string message = string.Empty;
    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
            navManager.NavigateTo("/users/login");
            NavigateToLogin();
        }
        catch (ApiException ex)
        {
            if(ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            message = ex.Message;
        }
    }
    private void NavigateToLogin() => navManager.NavigateTo("/users/login");

}
