@page "/users/register"
@inject IClient client
@inject NavigationManager manager
@using BookStore.UI.Services.Base

<h3>Register New Account</h3>

@if(string.IsNullOrEmpty(message)==false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>

}
<div>
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary/>
        <div class="form-group">
            <label for="email">Email Adress</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email"/>
            <ValidationMessage For="@(()=>RegistrationModel.Email)"/>
        </div>
        <br />
        <div class="form-group">
            <label for="email">FirstName</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName"/>
            <ValidationMessage For="@(()=>RegistrationModel.FirstName)"/>
        </div>
        <br />
        <div class="form-group">
            <label for="email">LastName</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName"/>
            <ValidationMessage For="@(()=>RegistrationModel.LastName)"/>
        </div>
        <br />
        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password"/>
            <ValidationMessage For="@(()=>RegistrationModel.Password)"/>
        </div>
         <br />
        <button type="submit" class="btn btn-primary btn-block">Register</button>

    </EditForm>
</div>


@code {
    UserDTO RegistrationModel = new UserDTO
    {
       Role="User"
    };
    string message = string.Empty;
    private async Task HandleRegistration()
    {

        try
        {
            await client.RegisterAsync(RegistrationModel);
            NavigateToLogin();
        }
        catch (ApiException ex)
        {
            if(ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            message = ex.Response;
        }

    }

    private void NavigateToLogin()
    {
        manager.NavigateTo("/users/login");
    }

}
